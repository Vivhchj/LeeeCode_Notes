content:
给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

示例 1：
输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。

示例 2：
输入: "cbbd"
输出: "bb"

solution:
## 1.中心扩展方法
class Solution:
    def longestPalindrome(self, s: str) -> str:
        length = len(s)
        maxlen = 0
        result = ""
        for i in range(length):
            len1 = s_extend(s, i, i)
            len2 = s_extend(s, i, i+1)
            if len1>len2 and (2*len1-1)>maxlen:
                result = s[i-len1+1 : i+len1]
                maxlen = 2*len1-1
            elif len2>=len1 and 2*len2>maxlen:
                result = s[i-len2+1 : i+len2+1]
                maxlen = 2*len2
        return result
    
def s_extend(s: str, start: int, end: int) -> int:
    length = len(s)
    l = 0
    while start>=0 and end<length:
        if s[start]==s[end]:
            l += 1
            start -= 1
            end += 1
        else:
            break
    return l

## 2.动态规划方法


## 3.manacher算法（专用于查找一个字符串的最长回文子串）
