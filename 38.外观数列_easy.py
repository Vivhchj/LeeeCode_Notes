# 「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。前五项如下：
# 1.     1
# 2.     11
# 3.     21
# 4.     1211
# 5.     111221

# 1 被读作  "one 1"  ("一个一") , 即 11。
# 11 被读作 "two 1s" ("两个一"）, 即 21。
# 21 被读作 "one 2",  "one 1" （"一个二" ,  "一个一") , 即 1211。
# 给定一个正整数 n（1 ≤ n ≤ 30），输出外观数列的第 n 项。
# 注意：整数序列中的每一项将表示为一个字符串。

# 示例 1:
# 输入: 1
# 输出: "1"


# 示例 2:
# 输入: 4
# 输出: "1211"
# 解释：当 n = 3 时，序列是 "21"，其中有 "2" 和 "1" 两组，"2" 可以读作 "12"，也就是出现频次 = 1 而 值 = 2；类似 "1" 可以读作 "11"。所以答案是 "12" 和 "11" 组合在一起，也就是 "1211"。

class Solution:
    def countAndSay(self, n: int) -> str:
        # 每次都遍历一遍字符串，对每个数字相同且连续的子串（长度包括1）将其"计数+数字"写入新的字符串中
        def one_time(s: str) -> str:
            re_s, count = "", 1
			# 当s长度为1
            if len(s) == 1:
                re_s = str(count) + s
            # 长度大于1，逐个遍历
			else:
				# 因为这里比较s[i]与s[i-1]的大小，所以从s[1]开始
                for i in range(1, len(s)):
                    if s[i]==s[i-1]:
                        count += 1
                    else:
                        re_s += (str(count) + s[i-1])
                        count = 1
				# 写入最末尾的连续子串
                re_s += (str(count) + s[-1])
            return re_s
        
        if n>1:
            s = '1'
            for i in range(n-1):
                s = one_time(s)
                
        else:
            s = "1"
        return s
